AUTOF = function(element, options) {
    this.options = options || {};
    this.element = document.getElementById(element);
    this.options = options;
    this.form = this.options.def.form;
    form = this.form
    fields = form.fields
    this.formId = this.form.name + "_" + this.form.collection;
    /*Determinamos el tipo de campo a renderizar en función de la configuación en YAML*/
    function fieldType(theField) {
        var inputTypes = ['button', 'color', 'date', 'datetime', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week', 'decimal', 'currency', 'tags', 'linetags'] //Lista de campos que son evaluados como input
            //      console.log(f.name)
            //console.log(theField)
        if (_.has(theField, "enum")) {
            return 'select'
        }
        var fieldType = !_.has(f, "type") || _.indexOf(inputTypes, f.type) >= 0 && !fieldType ? 'input' : f.type
        return fieldType;
    }
    /*
            Convierte el select @el, en controles @type=checkbox | radio
            PARAMS:
            @el: Objeto jQuery del select
            @type: checkbox | radio
            */
    function selectToCheckboxOrRadio(el, type) {
        $("option:not(:empty)", el).each(function(j, option) {
            var $conv_option = $(option);
            // Create a radio:
            var checkboxOrRadio = $('<input type="' + type + '" />');
            // Set name and value:
            checkboxOrRadio.attr('name', el.attr('name')).attr('value', $conv_option.val()).attr('block', el.attr('block'));
            // Set checked if the option was selected
            if ($conv_option.attr('selected')) checkboxOrRadio.attr('checked', 'checked');
            // Insert radio before select box:
            el.before(checkboxOrRadio);
            // Insert a label:
            el.before($('<label />').attr('for', el.attr('name')).attr('block', el.attr('block')).text($conv_option.text()));
        });
        /*
                Asignamos un evento para sincronizar los estados de los campos recien creados y el select origen
                */
        $('input[name=' + el.attr('id') + ']').on('change', function() {
            if (type == 'radio') {
                $('option', el).prop('selected', false)
            }
            var elementoACambiar = $('option[value=' + $(this).val() + ']', el)
            elementoACambiar.prop('selected', this.checked || false)
            console.log(el.val())
            $(el).change() // Lanzamos el evento change sobre el select, para que la sincronización sea completa
        })
    }
    /*Crea un div envolviendo cada uno de los grupos */
    function createBlocks() {
        bloques = []
        _.keys(form.fields).forEach(function(key) {
            if (key.charAt(0) == '_') {
                bloques.push(key)
            }
        })
        bloques.forEach(function(key) {
            f = form.fields[key]
            $('.autof [block=' + key + ']').wrapAll('<div style="' + f.css + '" class="block ' + (f.class || "none").replace(/,/g, ' ') + '"' + 'id=' + key + '>')
            var labelBlock = $('<span>', {
                class: "blockname" + " " + (form.fields[key].class || "none").replace(/,/g, ' '),
                dest: key,
                style: form.fields[key].css
            }).text(_.humanize(key.replace(/_/, ''))).insertBefore($('.block#' + key))
            $('<i>', {
                class: "fa fa-chevron-down"
            }).appendTo(labelBlock)
            labelBlock.on('click tap', function() {
                $('#' + key).slideToggle(500)
                $(this).toggleClass('collapse')
            })
            if (f.open == false) {
                $('#' + key).hide()
                labelBlock.addClass('collapse')
            }
        })
    }
    /*Activa o desasctiva @el en función del valor de @param
            @param debe ser una cadena como "nombre|luis,pepe,carlos" donde "nombre" es el id del campo a evaluar y "luis,pepe,carlos" los valores a comprobar.
            Si @el.value esta en la lista, el campo se desactivará.
            */
    function disabledIf(el, param) {
        var x = param.toLowerCase().split('|')
        var basefield = x[0].trim()
        var val = document.getElementById(basefield)
        $(val).on('click change select', function() {
            values = x[1].split(',')
            values.forEach(function(e, i) {
                values[i] = e.trim()
            })
            //console.log($('[name=' + basefield + ']:checked').val())
            var esDisabled = values.indexOf(val.value.toLowerCase()) >= 0 ? true : false
            $(el).prop('disabled', esDisabled)
        })
        $(val).change()
    }
    /*
            Esta función rellena los select con los valores definidos en el archivo yaml
            Param:
            select = el id del select a rellenar
            optionList = lista de valores separadas por comas.

            se admiten los siguientes elemento es la lista para definir comportamiento:
                asc: Por defecto, ordena los elementos en modo ascendente
                desc: Ordena los elementos en modo descendente
                unorder: Muestra los elementos en el orden en que está escrito
                nohumanize: Se asegura de que todos los elementos comienzan pos Mayusculas. Por defecto se "humanizan" las cadenas.
                upper: Se fuerza todo a mayúsculas
                lower: Se fuerza todo a minúsculas
            Valor seleccionado:
                nombre_de_elemento|* Lo convierte en un valor seleccionado
                */
    function createOptions(select, f) {
        list = f.enum
        configList = f.enum_config
        theSelect = document.getElementById(select)
        //$('option', theSelect).remove()
        /*Convertimos la cadena en un array*/
        var list = list.split(',')
        var autoDisorder = ""
        for (key in list) {
            list[key] = _.trim(list[key])
            //vemos si tenemos que trabajar con optgroup
            if (_.trim(_(list[key]).strRightBack('|')).toLowerCase() == "optgroup") {
                var hasOptionGroups = true
                configList = configList + " "
            }
        }
        //Si se han pasado parametros de configuración (o hay optgroup) procesamos los filtros
        if (configList || hasOptionGroups) {
            config = configList.split(',')
            for (key in config) {
                config[key] = _.trim(config[key])
            }
            if (hasOptionGroups) {
                config = _.without(config, 'desc', 'asc')
                config.push('unorder')
            }
            //console.log(config)
            /*Humanizamos*/
            if (_.indexOf(config, 'nohumanize') == -1) {
                for (key in list) {
                    list[key] = _.humanize(list[key])
                }
            }
            /*Pasamos a Upper*/
            if (_.indexOf(config, 'upper') >= 0) {
                for (key in list) {
                    list[key] = list[key].toUpperCase()
                }
            }
            /*Pasamos a lower*/
            if (_.indexOf(config, 'lower') >= 0) {
                for (key in list) {
                    list[key] = list[key].toLowerCase()
                }
            }
            /*Ordenamos ascendentemente*/
            if (_.indexOf(config, 'unorder') == -1) {
                list.sort()
            }
            /*Ordenamos descendentemente*/
            if (_.indexOf(config, 'desc') >= 0) {
                list.reverse()
            }
        } else {
            /*Configuraciones por defecto*/
            for (key in list) {
                list[key] = _.humanize(list[key])
            }
            list.sort()
        }
        var varOptionGroups = []
        for (key in list) {
            var val = _(list[key]).strLeftBack('|')
            var prop = _(list[key].toLowerCase()).strRightBack('|')
            var isSelected = prop.indexOf('*') >= 0 ? 'selected' : null
                /*Ponemos los agrupadores de opciones, si hay*/
            if (prop == 'optgroup') {
                var groupLabel = val || 'init'
                varOptionGroups.push(val)
                //                var elOpt = $('<optgroup>', {
                //                    label: val
                //                }).appendTo(theSelect)
            } else {
                var elOpt = $('<option>', {
                    selected: isSelected,
                    value: val,
                    group: groupLabel
                }).appendTo(theSelect).text(val)
            }
        }
        //        console.log(configList)
        if ($("option[selected]", theSelect).length == 0) {
            //if (!f.type ) {
            $('<option>').prependTo(theSelect).attr('selected', 'selected')
            //}
        }
        // console.log(varOptionGroups)
        varOptionGroups.forEach(function(key) {
            $("option[group=" + key + "]", theSelect).wrapAll('<optgroup label=' + key + '>')
        })
    }
    /*Definimos las propiedades del form*/
    elForm = $("<form>", {
        class: _.trim((form.classes || "none").replace(/,/g, ' ')) + " autof",
        id: _.slugify(this.formId),
        name: _.slugify(form.name)
    }).appendTo(this.element);
    $('<span>', {
        class: "form_title",
        text: form.name
    }).appendTo(elForm)
    blockName = 'init-block'
    /*Iteramos pod cada uno de los campos definidos*/
    for (key in fields) {
        var f = fields[key]
        if (!f) {
            console.log("incomplete form definition in field [" + key + " ]. Ommiting.")
            break; //Salimos si esta
        }
        if (f.title) {
            var title = f.title
        } else {
            var title = _.humanize(key)
        }
        if (key.charAt(0) == '_') {
            blockName = key
        } else {
            $('<label>', {
                for: key,
                class: "field",
                block: blockName
            }).appendTo(elForm).text(title)
            /*Definimos el tipo de campo (input, textarea, select, etc) que vamos a crear
                    y le establecemos las propiedades que son comunes a todas*/
            var fType = fieldType(f)
            var newElement = $('<' + fType + '>', {
                    id: _.underscored(key),
                    placeholder: f.placeholder,
                    name: key,
                    title: f.help,
                    required: f.required,
                    block: blockName,
                    class: f.class ? f.class.replace(/,/g, ' ') : null,
                    style: f.type == 'radio' || f.type == 'checkbox' ? 'display:none' : f.css,
                }).appendTo(elForm).prop("disabled", f.disabled)
                //Establecemos los atributos definidos em attributes
                //Creamos atributos en cada campo, que utilizaremos despues para personalizar el comportamiento
            if (f.attributes) {
                var arrAttr = f.attributes.split('|')
                arrAttr.forEach(function(key) {
                    $(newElement).attr(_.underscored(_(key).strLeft("=")), parseEval(_(key).strRight("=")))
                })
            }
            if (f.disabled_if) {
                disabledIf(newElement, f.disabled_if)
            }

            //Si hemos definido que se guarde en un tipo determinado, lo guardamos en un atributo del campo...
            if (f.save_as_type) {
                $(newElement).attr("save_as_type", f.save_as_type)
            }
            /*Gestionamos las acciones si existe el valor enum_depend:*/
            if (f.enum_depend) {
                $('#' + f.enum_depend.trim()).on('change', function() {
                    var v = $(this).val()
                    $('option, optgroup', newElement).hide()
                    $('option[group=' + v + ']', newElement).show()
                    $(newElement).removeAttr('disabled')
                })
                $(newElement).attr('disabled', 'disabled')
            }
            //Establecemos las propiedades especificas de elementos select
            if (fType == 'select') {
                $(newElement).attr("size", f.size)
                //OJO: es importante establecer el atributo"multiple", especialmente siq ueremos que se renderizen varios elementos "selected"
                if (f.multiple) {
                    f.type = f.type == 'radio' ? 'checkbox' : f.type //Un campo radio, que se ha puesto como "multiple, lo convertimos en checkbox"
                    $(newElement).attr("multiple", "multiple").attr('size', f.size)
                } else {
                    f.type = f.type == 'checkbox' ? 'radio' : f.type
                }
                createOptions(_.underscored(key), f)
            }
            if (f.type == 'radio' || f.type == 'checkbox') {
                selectToCheckboxOrRadio($(newElement), f.type)
            }
            f.type == 'radio' || f.type == 'checkbox' ? f.type = 'text' : f.type
            //Establecemos las propiedades de elementos input y texarea
            if (fType == 'input' || fType == 'textarea') {
                $(newElement).attr("placeholder", f.placeholder).val(f.default).attr("pattern", f.pattern).attr("type", f.type || 'text').attr("min", f.min).attr("max", f.max).attr("maxlength", f.maxlength).attr("readonly", f.readonly).attr("step", f.step).attr("accept", f.accept)
                //establecemos propiedades personalizadas (own) , si las hay
                if (f.own_attributes) {
                    var owns = f.own_attributes.split(',')
                        //console.log(owns)
                    owns.forEach(function(x) {
                        $(newElement).attr(x.split('|')[0].trim(), x.split('|')[1].trim())
                    })
                }
            }
        }
    }
    createBlocks()
    var buttonsGroup = $('<ul>', {
        class: "button-group"
    }).appendTo(elForm)
    var btDelete = $('<li>', {
        class: "tiny button alert disabled",
        id: "delete-button",
        tittle: "Eliminar este formulario"
    }).appendTo(buttonsGroup).html('<i class="fa fa-remove fa-2x"></i>')
    var btAdd = $('<li>', {
        class: "tiny button",
        id: "add-button",
        title: "Añadir"
    }).appendTo(buttonsGroup).html('<i class="fa fa-plus fa-2x"></i>')
    var btSave = $('<li>', {
            class: "tiny button disabled",
            id: "save-button",
            title: "Guardar este registro"
        }).appendTo(buttonsGroup).html('<i class="fa fa-save fa-2x"></i>')

    $("#formhtml").text($("#formbox").html()) //reflejamos los cambios en otro cuadro, para ir viendo...
};

/*
$(document).ready(function () {




    _.mixin(_.str.exports()); //HAbilitamos soporte No-conflict para underscores strings


    $.get('test.yml')
        .done(function (data) {
            yml = data;
            json = YAML.parse(data);
            $("#yml").val(yml);
            $("#json").val(JSON.stringify(json));
            autof = new AUTOF('formbox', {
                def: json
            })
        });



});
*/